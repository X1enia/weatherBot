spring:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: telegram-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
      #        spring.json.value.default.type: >-
      #          GET_WEATHER:com.example.kafkacommon.dto.GetWeatherDto
      auto-offset-reset: latest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
    #        spring.json.value.default.type: >-
    #          SEND_WEATHER:com.example.kafka-common.dto.ResponseWeatherDto
    topic:
      weather: weather.service
      telegram: telegram.service
telegram-config:
  token: ${API_TELEGRAM_TOKEN}
  url: ${URL:https://16fa-37-112-66-2.eu.ngrok.io}
  name: weather
  path: pathWeather
