spring:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: weather-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
#        spring.json.value.default.type: >-
#          GET_WEATHER:com.example.kafkacommon.dto.weather.GetWeatherDto
      auto-offset-reset: latest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
#        spring.json.value.default.type: >-
#          SEND_WEATHER:com.example.kafka-common.dto.ResponseWeatherDto
    topic:
      weather: weather.service
      telegram: telegram.service
weather:
  config:
    token: ${API_TOKEN:c805ecd060a2be9805f613473812ea6d}
    urlOneDay: ${API_DAY_URL:https://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric&lang=ru}
    urlFiveDay: ${API_FIVE_URL:https://api.openweathermap.org/data/2.5/forecast?q=%s&appid=%s&units=metric&lang=ru}